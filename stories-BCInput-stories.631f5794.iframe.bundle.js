"use strict";(self.webpackChunkbuildcorp_uikits=self.webpackChunkbuildcorp_uikits||[]).push([[706],{"./src/stories/BCInput.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DatePickerInput:()=>DatePickerInput,Default:()=>Default,DisabledInput:()=>DisabledInput,InputWithIcon:()=>InputWithIcon,__namedExportsOrder:()=>__namedExportsOrder,default:()=>BCInput_stories});var react=__webpack_require__("./node_modules/react/index.js"),dateValues=__webpack_require__("./node_modules/@fluentui/date-time-utilities/lib/dateValues/dateValues.js"),lib=__webpack_require__("./node_modules/@fluentui/font-icons-mdl2/lib/index.js"),DatePicker=__webpack_require__("./node_modules/@fluentui/react/lib/components/DatePicker/DatePicker.js"),defaults=__webpack_require__("./node_modules/@fluentui/react/lib/components/DatePicker/defaults.js"),TextField=__webpack_require__("./node_modules/@fluentui/react/lib/components/TextField/TextField.js");(0,lib.v)();const BCInput=({value,label,disabled,icon,isDatePicker=!1,firstDayOfWeekProp=dateValues.ob.Monday,selectedDate=new Date,onChange,onSelectDate,...props})=>isDatePicker?react.createElement(DatePicker.l,{value:selectedDate,firstDayOfWeek:firstDayOfWeekProp,ariaLabel:"Select a date",strings:defaults.C,onSelectDate,styles:getDatePickerStyles,...props}):react.createElement(TextField.A,{label,value,disabled,iconProps:icon,onChange,styles:getStyles,...props});function getStyles(props){return{fieldGroup:[{"&:focus-within":{borderWidth:2,borderStyle:"solid",borderColor:"#69be28 !important",outline:"none !important"},"&::after":{border:"none"}},{"&:active":{borderWidth:2,borderStyle:"solid",borderColor:"#69be28 !important",outline:"none !important"}}]}}function getDatePickerStyles(props){return{root:{maxWidth:300}}}const Input_BCInput=BCInput;BCInput.__docgenInfo={description:"",methods:[],displayName:"BCInput",props:{value:{required:!0,tsType:{name:"any"},description:"The value of the input field. Accepts various types based on input type (e.g., string for TextField or Date for DatePicker)."},label:{required:!1,tsType:{name:"string"},description:"Label text for the input field, displayed above the input."},disabled:{required:!1,tsType:{name:"boolean"},description:"Disables the input field if set to true, preventing user interaction."},icon:{required:!1,tsType:{name:"union",raw:"IIconProps | undefined",elements:[{name:"IIconProps"},{name:"undefined"}]},description:"Icon properties for displaying an icon within the input field, using Fluent UI icon properties."},isDatePicker:{required:!1,tsType:{name:"boolean"},description:"If true, renders a DatePicker component instead of a TextField.",defaultValue:{value:"false",computed:!1}},firstDayOfWeekProp:{required:!1,tsType:{name:"DayOfWeek"},description:"Specifies the first day of the week for the DatePicker (e.g., Monday or Sunday).",defaultValue:{value:"DayOfWeek.Monday",computed:!0}},selectedDate:{required:!1,tsType:{name:"union",raw:"Date | undefined",elements:[{name:"Date"},{name:"undefined"}]},description:"The currently selected date for the DatePicker component, if `isDatePicker` is true.",defaultValue:{value:"new Date()",computed:!1}},onChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(\n  event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n  newValue?: string\n) => void",signature:{arguments:[{type:{name:"ReactFormEvent",raw:"React.FormEvent<HTMLInputElement | HTMLTextAreaElement>",elements:[{name:"union",raw:"HTMLInputElement | HTMLTextAreaElement",elements:[{name:"HTMLInputElement"},{name:"HTMLTextAreaElement"}]}]},name:"event"},{type:{name:"string"},name:"newValue"}],return:{name:"void"}}},description:"Callback function triggered when the input value changes, providing the new value."},onSelectDate:{required:!1,tsType:{name:"signature",type:"function",raw:"(date: Date | null | undefined) => void",signature:{arguments:[{type:{name:"union",raw:"Date | null | undefined",elements:[{name:"Date"},{name:"null"},{name:"undefined"}]},name:"date"}],return:{name:"void"}}},description:"Callback function triggered when a date is selected in the DatePicker, providing the selected date."}}};const BCInput_stories={title:"Components/BCInput",component:Input_BCInput,argTypes:{onChange:{action:"changed"},onSelectDate:{action:"date selected"},type:{control:"text"},icon:{control:"object"},isDatePicker:{control:"boolean"},disabled:{control:"boolean"}}},Template=args=>react.createElement(Input_BCInput,args),Default=Template.bind({});Default.args={label:"Text Input"};const DatePickerInput=Template.bind({});DatePickerInput.args={isDatePicker:!0,selectedDate:new Date,firstDayOfWeekProp:dateValues.ob.Monday,label:"Date Picker Input"};const DisabledInput=Template.bind({});DisabledInput.args={value:"Disabled Text",label:"Disabled Input",disabled:!0};const InputWithIcon=Template.bind({});InputWithIcon.args={value:"Text with Icon",label:"Input with Icon",icon:{iconName:"Calendar"}};const __namedExportsOrder=["Default","DatePickerInput","DisabledInput","InputWithIcon"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => <BCInput {...args} />",...Default.parameters?.docs?.source}}},DatePickerInput.parameters={...DatePickerInput.parameters,docs:{...DatePickerInput.parameters?.docs,source:{originalSource:"args => <BCInput {...args} />",...DatePickerInput.parameters?.docs?.source}}},DisabledInput.parameters={...DisabledInput.parameters,docs:{...DisabledInput.parameters?.docs,source:{originalSource:"args => <BCInput {...args} />",...DisabledInput.parameters?.docs?.source}}},InputWithIcon.parameters={...InputWithIcon.parameters,docs:{...InputWithIcon.parameters?.docs,source:{originalSource:"args => <BCInput {...args} />",...InputWithIcon.parameters?.docs?.source}}}}}]);